{"version":3,"sources":["pages/grid/Store.ts","pages/grid/Cell.tsx","pages/grid/Grid.tsx","common/color-picker/ColorPicker.tsx","pages/grid/GridPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DirectionEnum","AxisEnum","ActionEnum","grid","gridRank","hoverColor","r","g","b","a","backgroundColor","previousClickedCell","onCellClicked","cellValue","action","isFilled","map","Map","findFilledCells","concat","forEach","value","set","address","x","y","MouseOver","cell","runInAction","isSelected","MouseOut","Click","content","undefined","size","startCell","visitedCells","clear","startAddress","findFilledCellsInDirection","Back","Forward","Set","axis","direction","key","has","add","getNextIndex","i","getNextAddress","currentAddress","filledCells","nextAddress","currentCell","push","oppositeAxis","getOppositeAxis","connectedCellsOnPerpendicularAxis1","flatMap","connectedCellsOnPerpendicularAxis2","getRandomInt","min","max","Math","ceil","floor","random","getGrid","array","Array","innerArray","onGridRankChanged","onHoverColorColorChanged","color","onBackgroundColorColorChanged","createGrid","rawGrid","row","makeAutoObservable","this","reaction","delay","Cell","observer","props","sx","other","Box","bgcolor","p","textAlign","fontSize","fontWeight","onClick","onMouseOver","onMouseOut","CustomItem","styled","theme","palette","info","dark","SmartGrid","length","console","log","display","gridTemplateColumns","Store","ColorPicker","useState","displayColorPicker","setDisplayColorPicker","Swatch","Color","Popover","Cover","onChange","onColorChanged","rgb","div","GridPage","Container","component","maxWidth","pt","pb","Grid","container","item","xs","Slider","aria-label","valueLabelDisplay","_","App","defaultTheme","createTheme","className","AppBar","position","elevation","borderBottom","divider","Toolbar","flexWrap","Typography","variant","noWrap","flexGrow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.7708dd77.chunk.js","sourcesContent":["import { action, makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport { CellAddress } from './Cell';\r\nimport { RGBColor } from 'react-color';\r\n\r\nexport interface ICellValue {\r\n    isFilled: boolean;\r\n    isSelected: boolean;\r\n    address: CellAddress;\r\n    content?: number\r\n}\r\n\r\nenum DirectionEnum {\r\n    Back = 0,\r\n    Forward = 1,\r\n}\r\n\r\nenum AxisEnum {\r\n    x = 0,\r\n    y = 1,\r\n}\r\n\r\nexport enum ActionEnum {\r\n    MouseOver,\r\n    MouseOut,\r\n    Click,\r\n}\r\n\r\nclass Store {\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.createGrid();\r\n\r\n        reaction(() => this.gridRank,\r\n            () => this.createGrid(),\r\n            {delay: 500}\r\n        )\r\n    }\r\n\r\n    public grid: ICellValue[][] = [];\r\n    public gridRank = 25;\r\n    public hoverColor: RGBColor = {\r\n        r: 126,\r\n        g: 211,\r\n        b: 33,\r\n        a: 100,\r\n    } as RGBColor;\r\n\r\n    public backgroundColor: RGBColor = {\r\n        r: 74,\r\n        g: 144,\r\n        b: 226,\r\n        a: 100,\r\n    } as RGBColor;\r\n\r\n    private previousClickedCell?: ICellValue;\r\n    public onCellClicked = (cellValue: ICellValue, action: ActionEnum) => {\r\n        if (!cellValue.isFilled) {\r\n            return;\r\n        }\r\n\r\n        const map = new Map<string, ICellValue>();\r\n        this.findFilledCells(cellValue)\r\n            .concat(cellValue)\r\n            .forEach(value => map.set(`${value.address.x}:${value.address.y}`, value));\r\n\r\n        switch (action) {\r\n            case ActionEnum.MouseOver:\r\n                map.forEach(cell => runInAction(() => {\r\n                    cell.isSelected = true;\r\n                }));\r\n                break;\r\n            case ActionEnum.MouseOut:\r\n                map.forEach(cell => runInAction(() => {\r\n                    cell.isSelected = false;\r\n                }));\r\n                break;\r\n            case ActionEnum.Click:\r\n                runInAction(() => {\r\n                    if (this.previousClickedCell != null) {\r\n                        this.previousClickedCell.content = undefined;\r\n                    }\r\n                });\r\n                cellValue.content = map.size;\r\n                runInAction(() => this.previousClickedCell = cellValue);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private findFilledCells = (startCell: ICellValue) => {\r\n        this.visitedCells.clear();\r\n        const startAddress = startCell.address;\r\n        return [\r\n            ...this.findFilledCellsInDirection(startAddress, AxisEnum.x, DirectionEnum.Back),\r\n            ...this.findFilledCellsInDirection(startAddress, AxisEnum.x, DirectionEnum.Forward),\r\n            ...this.findFilledCellsInDirection(startAddress, AxisEnum.y, DirectionEnum.Back),\r\n            ...this.findFilledCellsInDirection(startAddress, AxisEnum.y, DirectionEnum.Forward),\r\n        ];\r\n    }\r\n\r\n    private readonly visitedCells = new Set<string>();\r\n    private findFilledCellsInDirection = (startAddress: CellAddress, axis: AxisEnum, direction: DirectionEnum): ICellValue[] => {\r\n        const key = `${startAddress.x}:${startAddress.y}:${axis}:${direction}`;\r\n        if (this.visitedCells.has(key)) {\r\n            return [];\r\n        }\r\n        this.visitedCells.add(key);\r\n\r\n        const getNextIndex = (i: number) => direction === DirectionEnum.Forward ? ++i : --i;\r\n        const getNextAddress = (currentAddress: CellAddress) => {\r\n            return axis === AxisEnum.x\r\n                ? {x: getNextIndex(currentAddress.x), y: currentAddress.y}\r\n                : {x: currentAddress.x, y: getNextIndex(currentAddress.y)};\r\n        }\r\n\r\n        const getCell = (address: CellAddress) => this.grid[address.y][address.x]\r\n\r\n        const filledCells: ICellValue[] = [];\r\n        let currentAddress = startAddress;\r\n        while (true) {\r\n            const nextAddress = getNextAddress(currentAddress);\r\n\r\n            if (nextAddress.x < 0 || nextAddress.x >= this.gridRank ||\r\n                nextAddress.y < 0 || nextAddress.y >= this.gridRank) {\r\n                break\r\n            }\r\n\r\n            const currentCell = getCell(nextAddress);\r\n            if (!currentCell.isFilled) {\r\n                break;\r\n            }\r\n\r\n            filledCells.push(currentCell);\r\n            currentAddress = currentCell.address;\r\n        }\r\n\r\n        const oppositeAxis = this.getOppositeAxis(axis);\r\n        const connectedCellsOnPerpendicularAxis1 = filledCells.flatMap(cell => this.findFilledCellsInDirection(cell.address, oppositeAxis, DirectionEnum.Back));\r\n        const connectedCellsOnPerpendicularAxis2 = filledCells.flatMap(cell => this.findFilledCellsInDirection(cell.address, oppositeAxis, DirectionEnum.Forward));\r\n        return filledCells\r\n            .concat(connectedCellsOnPerpendicularAxis1)\r\n            .concat(connectedCellsOnPerpendicularAxis2);\r\n    }\r\n\r\n    private getOppositeAxis = (axis: AxisEnum) => axis === AxisEnum.x ? AxisEnum.y : AxisEnum.x;\r\n\r\n    private getRandomInt = (min: number, max: number) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n\r\n    private getGrid = (size: number) => {\r\n        const minValue = 0;\r\n        const maxValue = 1;\r\n        const array = Array<Array<number>>(size);\r\n        for (let y = 0; y < size; y++) {\r\n            const innerArray = Array<number>(size);\r\n            for (let x = 0; x < size; x++) {\r\n                innerArray[x] = this.getRandomInt(minValue, maxValue);\r\n            }\r\n            array[y] = innerArray;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    public onGridRankChanged = action((value: number | number[]) => {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n        this.gridRank = value;\r\n    })\r\n\r\n    public onHoverColorColorChanged = action((color: RGBColor) => {\r\n        this.hoverColor = color;\r\n    })\r\n\r\n    public onBackgroundColorColorChanged = action((color: RGBColor) => {\r\n        this.backgroundColor = color;\r\n    })\r\n\r\n    private createGrid = action(() => {\r\n        const rawGrid = this.getGrid(this.gridRank);\r\n        this.grid = rawGrid\r\n            .map((row, y) =>\r\n                row.map((cellValue, x) => ({\r\n                    address: {x, y},\r\n                    isSelected: false,\r\n                    isFilled: cellValue === 1\r\n                } as ICellValue)));\r\n    })\r\n}\r\n\r\nexport default new Store();\r\n","import { Box, BoxProps } from '@mui/material';\r\nimport styled from 'styled-components';\r\nimport React from 'react';\r\nimport { ActionEnum, ICellValue } from './Store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RGBColor } from 'react-color';\r\n\r\nexport type CellAddress = {\r\n    x: number;\r\n    y: number;\r\n}\r\ntype CellProps = {\r\n    value: ICellValue;\r\n    onCellClicked: (cellValue: ICellValue, action: ActionEnum) => void;\r\n    hoverColor: RGBColor;\r\n    backgroundColor: RGBColor;\r\n} & BoxProps;\r\n\r\nconst Cell = observer((props: CellProps) => {\r\n    const {value, sx,  onCellClicked, backgroundColor, hoverColor, ...other} = props;\r\n\r\n    const color = value.isSelected\r\n        ? `rgba(${hoverColor.r}, ${hoverColor.g}, ${hoverColor.b}, ${hoverColor.a})`\r\n        : value.isFilled\r\n            ? `rgba(${backgroundColor.r}, ${backgroundColor.g}, ${backgroundColor.b}, ${backgroundColor.a})`\r\n            : undefined;\r\n\r\n    return (\r\n        <Box\r\n            sx={{\r\n                bgcolor: color,\r\n                color: 'white',\r\n                p: 1,\r\n                textAlign: 'center',\r\n                fontSize: 19,\r\n                fontWeight: '700',\r\n                ...sx,\r\n            }}\r\n            onClick={() => onCellClicked(value, ActionEnum.Click)}\r\n            onMouseOver={() => onCellClicked(value, ActionEnum.MouseOver)}\r\n            onMouseOut={() => onCellClicked(value, ActionEnum.MouseOut)}\r\n            {...other}\r\n        >\r\n            {value.content}\r\n        </Box>\r\n    );\r\n});\r\n\r\nexport const CustomItem = styled(Cell)`\r\n  display: flex;\r\n  border: 1px solid ${props => props.theme.palette.info.dark};\r\n  &:before {\r\n    content: \"\";\r\n    display: block;\r\n    height: 0;\r\n    width: 0;\r\n    padding-bottom: calc(100%);\r\n  }\r\n`;\r\n","import { CustomItem } from './Cell';\r\nimport Store, { ICellValue } from './Store';\r\nimport { Box } from '@mui/material';\r\nimport React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RGBColor } from 'react-color';\r\n\r\ninterface GridProps {\r\n    grid: ICellValue[][];\r\n    hoverColor: RGBColor;\r\n    backgroundColor: RGBColor;\r\n}\r\n\r\nexport const SmartGrid = observer((props: GridProps) => {\r\n    const {grid, hoverColor, backgroundColor} = props;\r\n    const gridRank = grid.length;\r\n    console.log(`render(). gridRank: ${gridRank}; grid size: ${grid[0].length}x${grid.length}`)\r\n\r\n    return <Box sx={{display: 'grid', gridTemplateColumns: `repeat(${gridRank}, calc(95vw/${gridRank}))`}}>\r\n        {\r\n            grid.map((row, y) =>\r\n                row.map((cellValue, x) =>\r\n                    <CustomItem\r\n                        backgroundColor={backgroundColor}\r\n                        hoverColor={hoverColor}\r\n                        value={cellValue}\r\n                        key={`${x}-${y}`}\r\n                        onCellClicked={Store.onCellClicked}\r\n                    />))\r\n        }\r\n    </Box>\r\n});\r\n","import { ColorResult, RGBColor, SketchPicker } from 'react-color'\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IColorPickerProps {\r\n    value: RGBColor;\r\n    onColorChanged: (color: RGBColor) => void;\r\n}\r\n\r\nconst ColorPicker = observer((props: IColorPickerProps) => {\r\n    const [displayColorPicker, setDisplayColorPicker] = useState(false);\r\n    const handleClick = () => setDisplayColorPicker(!displayColorPicker);\r\n    const handleClose = () => setDisplayColorPicker(false);\r\n\r\n    const handleChange = (color: ColorResult) => {\r\n        props.onColorChanged(color.rgb);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Swatch onClick={handleClick}>\r\n                <Color value={props.value}/>\r\n            </Swatch>\r\n            {displayColorPicker\r\n                ? <Popover>\r\n                    <Cover onClick={handleClose}/>\r\n                    <SketchPicker color={props.value} onChange={handleChange}/>\r\n                </Popover>\r\n                : null}\r\n\r\n        </div>\r\n    )\r\n\r\n})\r\n\r\nexport default ColorPicker;\r\n\r\nconst Swatch = styled.div`\r\n  padding: 5px;\r\n  background: #fff;\r\n  border-radius: 1px;\r\n  box-shadow: 0 0 0 1px rgba(0, 0, 0, .1);\r\n  display: inline-block;\r\n  cursor: pointer;\r\n`\r\n\r\nconst Color = styled.div<{ value: RGBColor }>`\r\n  width: 200px;\r\n  height: 14px;\r\n  border-radius: 2px;\r\n  background: rgba(${props => props.value.r}, ${props => props.value.g}, ${props => props.value.b}, ${props => props.value.a});\r\n`\r\n\r\nconst Popover = styled.div`\r\n  position: absolute;\r\n  z-index: 2;\r\n`\r\n\r\nconst Cover = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`\r\n","import React from 'react';\r\nimport { Container, Grid, Slider } from '@mui/material';\r\nimport Store from './Store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { SmartGrid } from './Grid';\r\nimport ColorPicker from '../../common/color-picker/ColorPicker';\r\n\r\nexport const GridPage = observer(() => {\r\n    const {grid, gridRank, onGridRankChanged, hoverColor, backgroundColor, onHoverColorColorChanged, onBackgroundColorColorChanged} = Store;\r\n    return <>\r\n        <Container component='main' maxWidth={false} sx={{pt: 1, pb: 6}}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <Slider value={gridRank} aria-label=\"Default\" valueLabelDisplay=\"auto\"\r\n                            onChange={(_, value) => onGridRankChanged(value)}/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <ColorPicker value={hoverColor} onColorChanged={onHoverColorColorChanged}/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <ColorPicker value={backgroundColor} onColorChanged={onBackgroundColorColorChanged}/>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <SmartGrid grid={grid} hoverColor={hoverColor} backgroundColor={backgroundColor}/>\r\n        </Container>\r\n    </>\r\n})\r\n","import React from 'react';\nimport './App.css';\nimport { AppBar, createTheme, Toolbar, Typography } from '@mui/material';\nimport { ThemeProvider } from 'styled-components';\nimport { GridPage } from './pages/grid/GridPage';\n\nconst App = () => {\n    const defaultTheme = createTheme();\n\n    return (\n        <>\n            <ThemeProvider theme={defaultTheme}>\n                <div className=\"App\">\n                    <AppBar\n                        position=\"static\"\n                        color=\"default\"\n                        elevation={0}\n                        sx={{borderBottom: (theme) => `1px solid ${theme.palette.divider}`}}\n                    >\n                        <Toolbar sx={{flexWrap: 'wrap'}}>\n                            <Typography variant=\"h6\" color=\"inherit\" noWrap sx={{flexGrow: 1}}>\n                                Grid Interview Problem\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    <GridPage/>\n                </div>\n            </ThemeProvider>\n        </>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@mui/material';\n\nReactDOM.render(\n  <React.StrictMode>\n      <CssBaseline />\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}